{"version":3,"sources":["dominion_dish/frontend/components/post.cljs"],"mappings":"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","names":["p__31309","map__31310","cljs.core/--destructure-map","cljs.core.get","dominion-dish.frontend.components.post/post-preview","title","content","id","post-type","published","formatted-content","dominion-dish.frontend.utils/strip-off-html","re-frame.core/dispatch","dominion-dish.frontend.utils/format-date","cljs.core.subs","dominion-dish.frontend.components.post/post-detail-el","cljs.core.atom","p__31311","map__31312","dominion-dish.frontend.components.post/post-detail","cljs.core/deref","loading","re_frame.core.subscribe","error","el","cljs.core/reset!","and__4210__auto__","cljs.core/not","dominion-dish.frontend.components.generic/loader","dominion-dish.frontend.components.generic/error","dominion-dish.frontend.components.post/post-list-get-more-el","p__31315","map__31316","dominion-dish.frontend.components.post/post-list","posts","last-loaded-page","per","p1__31314#","cljs.core.map","cljs.core.assoc","cljs.core._EQ_","cljs.core/count","dominion_dish.frontend.components.generic.error","cljs.core.not_EQ_"],"sourcesContent":["(ns dominion-dish.frontend.components.post\n  (:require [re-frame.core :refer [subscribe dispatch]]\n            [dominion-dish.frontend.subs :as subs]\n            [dominion-dish.frontend.utils :as utils]\n            [dominion-dish.frontend.events :as events]\n            [dominion-dish.frontend.components.generic :as generic]))\n\n;; Post Preview Component\n(defn post-preview\n  \"Post preview card for the main page\"\n  [{:keys [title content id post-type published]}]\n  (let [formatted-content (utils/strip-off-html content)]\n    [:div.post-preview\n     {:key id\n      :on-click #(dispatch [::events/navigate\n                            {:handler :post-detail\n                             :post-type post-type\n                             :post-id id}])}\n     [:div.title\n      [:h3 title]\n      [:p (utils/format-date published)]] ; nah, look into text-overflow: ellipsis for this\n     [:p.preview-body (if (> (count formatted-content) 200)\n                        (str (subs formatted-content 0 200) \"...\")\n                        formatted-content)]]))\n\n;; Post Detail Component\n(def post-detail-el (atom nil))\n\n(defn post-detail\n  \"Post detail card for full view\"\n  [{:keys [title content published]}]\n  (let [loading @(subscribe [::subs/loading])\n        error @(subscribe [::subs/error])]\n    [:div.post-detail {:ref (fn [el] (reset! post-detail-el el))}\n     (when (and loading (not error)) (generic/loader {:size \"large\"}))\n     (when (and (not loading) error) (generic/error))\n     (when (and (not loading) (not error))\n       [:<>\n         [:div.title\n           [:h3 title]\n           [:p (utils/format-date published)]]\n         [:p.detail-body (utils/strip-off-html content)]])]))\n\n;; Post List Component\n(def post-list-get-more-el (atom nil))\n\n(defn post-list\n  \"Returns a post list of posts of passed in type\"\n  [{:keys [post-type posts]}]\n  (let [loading @(subscribe [::subs/loading])\n        error @(subscribe [::subs/error])\n        last-loaded-page @(subscribe [::subs/last-loaded-page post-type])\n        per @(subscribe [::subs/per post-type])]\n    [:div.post-list\n     (map\n      #(post-preview (assoc % :post-type post-type))\n      (:items posts))\n     (when (and loading (not error))\n       (generic/loader {:size (if (= (count (:items posts)) 0) \"large\" \"small\")}))\n     (when (and (not loading) error)\n       (generic/error \"The Dish can't get more posts right now. Give us a moment and try again.\"))\n     (when (= (* last-loaded-page per) (count (:items posts)))\n       [:div {:id \"post-list-get-more\"\n              :ref (fn [el] (reset! post-list-get-more-el el))}])\n     (when (not= (* last-loaded-page per) (count (:items posts)))\n       [:div {:id \"post-list-end\"}\n        [:i {:class \"fas fa-ellipsis-h\"}]])]))\n\n;; this is working with component loader HOC, but i'm not 100% sure why\n;; (defn post-list\n;;   \"Returns a post list of posts of passed in type\"\n;;   [{:keys [post-type posts]}]\n;;   (let [loading @(subscribe [::subs/loading])\n;;         error false]\n;;     (generic/component-loader\n;;      {:loading loading\n;;       :error error\n;;       :wrapper-class \"post-list\"\n;;       :contents [:<>\n;;                  (map\n;;                   #(post-preview (assoc % :post-type post-type))\n;;                   (:items posts))\n;;                  [:div {:id \"post-list-get-more\" \n;;                         :ref (fn [el]\n;;                                (println \"yo new one is made: \" el)\n;;                                (reset! post-list-get-more-el el))}]]})))\n"]}