{"version":3,"sources":["dominion_dish/frontend/components/generic.cljs"],"mappings":";AAIA;;;mDAAA,2DAAAA,9GAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,qDAAA,vHAEWI;AAFX,AAGE,YAAA,mFAAA,kBAAA,UAAA,gBAAA,eAAA,tJAAMC;AAAN,AAAA,0FAAA,mDAAA,2CAAA,uIAAA,mFAAA,gDAAA,2CAAA,oKAAA,mFAAA,gDAAA,2CAAA,oKAAA,mFAAA,gDAAA,2CAAA,oKAAA,mFAAA,8CAAA,tsCAKgB,CAAA,sDAAeD,8PAChB,CAAA,sDAAe,AAACE,mBAASD,wQACzB,CAAA,sDAAe,AAACC,mBAASD,wQACzB,CAAA,sDAAe,AAACC,mBAASD;;AAI1C,AAAA;;;kDAAA,0DAAAE,5GAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,qFAAAF;;;AAAA,AAAA,CAAA,uFAAA,vFAAME,kGAEDI;AAFL,AAAA,0FAAA,8DAGa,iBAAAC,mBAAID;AAAJ,AAAA,oBAAAC;AAAAA;;AAAA;;;;;AAHb,CAAA,0EAAA,1EAAML;;AAAN;AAAA,CAAA,oEAAA,WAAAC,/EAAMD;AAAN,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA,AAkBA,AAAA,yDAAA,iEAAAP,1HAAMY;AAAN,AAAA,IAAAX,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAW,4FAAAR;;;AAAA,AAAA,CAAA,8FAAA,9FAAMQ,yGACDE;AADL,AAEE,IAAMC,YAAU,gDAAA,hDAACC;AAAjB,AACE,+DAAA,2CAAA,oEAAA,cAAA,rLAACC,uQAEuB,WAAKC,IAAIC;AAAT,AACE,gCAAA,hCAACC,sBAAOL,6FAAWG,IAAIC;;AACvB,yGAAA,zGAACE,iHAAgBH;;AACjB,gHAAA,zGAACG,kHAAiBF;GAL5C,yEAMmB;mCAAOL;AAAP,AACE,GAAI,CAAA,AAAAQ,8BAAA,dAAOP;AACT,oDAAA,mFAAA,hIAACQ,yLAAWT;;AACZ,OAACR;;;;IAHEQ;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;;AAT9B,CAAA,iFAAA,jFAAMF;;AAAN;AAAA,CAAA,2EAAA,WAAAC,tFAAMD;AAAN,AAAA,IAAAJ,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAI;;;AAAA","names":["p__48671","map__48672","cljs.core/--destructure-map","cljs.core.get","dominion-dish.frontend.components.generic/loader","size","icons","cljs.core/rand-nth","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","dominion-dish.frontend.components.generic/error","seq48673","self__4806__auto__","cljs.core/seq","message","or__4212__auto__","dominion-dish.frontend.components.generic/err-boundary","seq48675","children","err-state","reagent.core.atom","reagent.core.create_class","err","info","cljs.core/reset!","cljs.core.println","cljs.core/deref","cljs.core.into"],"sourcesContent":["(ns dominion-dish.frontend.components.generic\n  (:require [reagent.core :as r]))\n\n;; Loader Component\n(defn loader \n  \"An animated loader\"\n  [{:keys [size] :or {size \"large\"}}] ; \"small\" or \"large\"\n  (let [icons [\"basketball-ball\"\n               \"running\"\n               \"football-ball\"\n               \"table-tennis\"\n               \"volleyball-ball\"]]\n    [:div {:class (str \"loader \" size)}\n     [:i {:class (str \"fas fa-\" (rand-nth icons))}]\n     [:i {:class (str \"fas fa-\" (rand-nth icons))}]\n     [:i {:class (str \"fas fa-\" (rand-nth icons))}]\n     [:p \"Loading...\"]]))\n  \n;; Error Component\n(defn error\n  \"Error state\"\n  [& message]\n  [:h3.error (or message \"The Dish hit a snag! Give us a moment and try again.\")])\n\n;; this HOC attempt has some issues, need to learn more\n;; maybe need a level 2 or 3 component here...\n;; (defn component-loader\n;;   \"Component that takes loading, error, and children\n;;    props and renders accordingly\"\n;;   [{:keys [loading error contents wrapper-class]}]\n;;   [:div {:class wrapper-class}\n;;    (cond\n;;      (= loading true) (loader)\n;;      (= error true)   (error)\n;;      :else contents)])\n\n;; https://lilac.town/writing/modern-react-in-cljs-error-boundaries/\n(defn err-boundary\n  [& children]\n  (let [err-state (r/atom nil)]\n    (r/create-class ; level 3 component\n      {:display-name \"ErrBoundary\"\n       :component-did-catch (fn [err info]\n                              (reset! err-state [err info])\n                              (println \"err: \" err)\n                              (println \"info: \" info))\n       :reagent-render (fn [& children]\n                         (if (nil? @err-state)\n                           (into [:<>] children)\n                           (error)))})))\n\n"]}