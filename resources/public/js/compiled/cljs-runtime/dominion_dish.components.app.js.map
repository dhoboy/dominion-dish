{"version":3,"sources":["dominion_dish/components/app.cljs"],"mappings":";AAcA,yCAAA,zCAAMA;AAAN,AAEE,wEAAA,xEAACC,oBACAC,uJAEA,WAAKC,EAAEA,MAAEC,UAAUC;AAAnB,AACE,GAAM,GAAA,cAAA,bAAOD;AAAb,AACE,uBAAA,mFAAA,0HAAA,2CAAA,/QAACE,0UAAiDF;;AADpD;;AAEA,GAAM,GAAA,cAAA,bAAOC;AAAb,AACE,8BAAA,mFAAA,sHAAA,2CAAA,3QAACC,sUAA+CD;;AADlD;;;;AAIH,iEAAA,jEAACJ,oBACAM,iKAEA,WAAKJ,EAAEA,MAAEA,MAAEE;AAAX,AACE,GAAM,GAAA,cAAA,bAAOA;AAAb,AACE,AAACG,oCAAsBH;;AACvB,OAACI;;AAFH;;;;AAKH,mBAAA,AAAAC,fAAMC,+BAAc,sDAAA,mFAAA,zIAACC;eAArB,AAAAF,XACMG,2BAAU,sDAAA,mFAAA,zIAACD;gBADjB,AAAAF,ZAEMI,4BAAW,sDAAA,mFAAA,zIAACF;AAFlB,AAAA,0FAAA,6DAAA,0HAAA,2CAAA,sFAAA,iIAAA,mFAAA,5XAIIG,+IAAyBF,4GACzBG,6LAEC,AAACC,2CAAkBH,WACnB,AAACI,0DAAcP","names":["dominion-dish.components.app/container","cljs.core/add-watch","dominion-dish.components.post/post-list-get-more-el","_","old-state","new-state","re-frame.core/dispatch","dominion-dish.components.post/post-detail-el","dominion-dish.utils/scroll-page-top","dominion-dish.utils/scroll-body-top","cljs.core/deref","active-panel","re_frame.core.subscribe","icon-key","post-type","dominion-dish.components.header/header","dominion-dish.components.generic/err-boundary","dominion-dish.components.nav/nav-container","dominion-dish.routes/panels"],"sourcesContent":["(ns dominion-dish.components.app\n  (:require\n   [re-frame.core :refer [subscribe dispatch]]\n   [dominion-dish.routes :as routes]\n   [dominion-dish.subs :as subs]\n   [dominion-dish.events :as events]\n   [dominion-dish.components.header :as header]\n   [dominion-dish.components.nav :as nav]\n   [dominion-dish.components.post :as post]\n   [dominion-dish.components.generic :as generic]\n   [dominion-dish.utils :as utils]))\n\n\n;; Main Parent Component for App\n(defn container []\n  ;; post list infinite scroll atom watcher\n  (add-watch\n   post/post-list-get-more-el \n   :post-list-load-more-watcher\n   (fn [_ _ old-state new-state]\n     (when (some? old-state)\n       (dispatch [::events/unobserve-post-list {:element old-state}]))\n     (when (some? new-state)\n       (dispatch [::events/observe-post-list {:element new-state}]))))\n  \n  ;; post detail scroll to top of page on load watcher\n  (add-watch\n   post/post-detail-el\n   :post-detail-load-scroll-top-watcher\n   (fn [_ _ _ new-state]\n     (when (some? new-state)\n       (utils/scroll-page-top new-state)\n       (utils/scroll-body-top))))\n  \n  ;; app \n  (let [active-panel @(subscribe [::subs/active-panel])\n        icon-key @(subscribe [::subs/icon-key])\n        post-type @(subscribe [::subs/post-type])]\n    [:div.page\n     [header/header {:icon-key icon-key}]\n     [generic/err-boundary\n      [:div.body\n       (nav/nav-container post-type)\n       (routes/panels active-panel)]]]))\n"]}