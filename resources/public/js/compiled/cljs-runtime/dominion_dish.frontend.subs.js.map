{"version":3,"sources":["dominion_dish/frontend/subs.cljs"],"mappings":";AAUA,2DAAA,3DAACA,uOAEA,WAAKC,GAAGC;AAAR,AACE,OAAA,oGAAeD;;AAGlB,2DAAA,3DAACD,6NAEA,WAAKC;AAAL,AACE,OAAA,yFAAUA;;AAGb,2DAAA,3DAACD,yNAEA,WAAKC;AAAL,AACE,OAAA,qFAAQA;;AAGX,2DAAA,3DAACD,6NAEA,WAAKC;AAAL,AACE,OAAA,yFAAUA;;AAGb,2DAAA,3DAACD,kOAEA,WAAKC;AAAL,AACE,OAAA,6FAAYA;;AAGf,2DAAA,3DAACD,iOAEA,WAAKC;AAAL,AACE,OAACE,iDACC,AAACC,8CACCC,iBACA,4CAAA,WAAAC,vDAACC;AAAD,+FAAUN,5CACA,AAACO,+CAAI,gDAAAF,hDAACG,lGACN,qKAAA,9JAACD;GACNE;;AAGZ,2DAAA,3DAACV,kOAEA,aAAAW,FAAKT;AAAL,AAAA,IAAAU,aAAAD;YAAA,AAAAE,4CAAAD,WAAA,IAAA,nEAAQV;cAAR,AAAAW,4CAAAD,WAAA,IAAA,rEAAUE;AAAV,AACE,gBAAA,AAAAC,ZAAMC,4BAAW,sDAAA,mFAAA,zIAACC;AAAlB,AACE,OAACC,gBACC,+CAAA,WAAAC,1DAACC;AAAD,AACG,OAACC,6CAAEP,QAAQ,AAAA,gFAAAK;GACZH;;AAGT,2DAAA,3DAAChB,0OAEA,cAAAsB,HAAKrB;AAAL,AAAA,IAAAsB,aAAAD;QAAA,AAAAT,4CAAAU,WAAA,IAAA,/DAASrB;gBAAT,AAAAW,4CAAAU,WAAA,IAAA,vEAAWC;AAAX,AACE,OAAChB,4CAAIP,GAAG,AAACQ,gDAAQe;;AAGpB,2DAAA,3DAACxB,gPAEA,cAAAyB,HAAKxB;AAAL,AAAA,IAAAyB,aAAAD;QAAA,AAAAZ,4CAAAa,WAAA,IAAA,/DAASxB;gBAAT,AAAAW,4CAAAa,WAAA,IAAA,vEAAWF;AAAX,AACE,OAAA,4GAAmB,iBAAAG,eAAC,AAAClB,gDAAQe;AAAV,AAAA,QAAAG,6CAAAA,iDAAAA,NAAqB1B,6BAAAA;;;AAE3C,2DAAA,3DAACD,qNAEA,cAAA4B,HAAK3B;AAAL,AAAA,IAAA4B,aAAAD;QAAA,AAAAf,4CAAAgB,WAAA,IAAA,/DAAS3B;gBAAT,AAAAW,4CAAAgB,WAAA,IAAA,vEAAWL;AAAX,AACE,OAAA,kFAAM,iBAAAM,eAAC,AAACrB,gDAAQe;AAAV,AAAA,QAAAM,6CAAAA,iDAAAA,NAAqB7B,6BAAAA;;;AAG9B,2DAAA,3DAACD,gOAEA;AAAA,AACE,cAAA,AAAAe,VAAMD,0BAAa,sDAAA,mFAAA,zIAACG;gBAApB,AAAAF,ZACMS,4BAAa,sDAAA,mFAAA,zIAACP;IACdc,cAAY,iBAAAC,mBAAA,AAAAjB,gBACE,sDAAA,mFAAA,zIAACE,8PAAwBH;AAD3B,AAAA,oBAAAkB;AAAAA;;AAEC,OAACd,gBAAM,AAAA,qFAAA,AAAAH,gBAAS,sDAAA,mFAAA,zIAACE,sQAA2BO;;;AAJ/D,AAKE,OAACf,gDACA,EAAI,EAAI,GAAA,YAAA,XAAOK,wBAAS,uDAAA,vDAACO,6CAAEG,uBACzB,AAACN,gBAAM,AAAA,uFAASa,cAChBP","names":["re_frame.core.reg_sub","db","_","cljs.core.distinct","cljs.core.apply","cljs.core/concat","p1__48483#","cljs.core.map","cljs.core.get","cljs.core.keyword","dominion-dish.frontend.db/post-types","p__48487","vec__48488","cljs.core.nth","post-id","cljs.core/deref","all-posts","re_frame.core.subscribe","cljs.core/first","p1__48486#","cljs.core.filter","cljs.core._EQ_","p__48493","vec__48494","post-type","p__48508","vec__48511","fexpr__48519","p__48538","vec__48541","fexpr__48544","recent-post","or__4212__auto__"],"sourcesContent":["(ns dominion-dish.frontend.subs\n  (:require [re-frame.core :refer [reg-sub subscribe]]\n            [dominion-dish.frontend.db :refer [post-types]]))\n\n;; hooks/use-selectors go here\n\n;; these all need to be named with two ::'s and I\n;; don't understand why\n\n;; active-panel\n(reg-sub\n ::active-panel\n (fn [db _]\n   (:active-panel db)))\n\n;; loading\n(reg-sub\n ::loading\n (fn [db]\n   (:loading db)))\n\n;; error\n(reg-sub\n ::error\n (fn [db]\n   (:error db)))\n\n;; post-id\n(reg-sub\n ::post-id\n (fn [db]\n   (:post-id db)))\n  \n;; post-type\n(reg-sub\n ::post-type\n (fn [db]\n   (:post-type db)))\n  \n;; all post arrays combined together, de-duped\n(reg-sub \n ::all-posts\n (fn [db]\n   (distinct\n     (apply\n       concat\n       (map #(-> db\n                 (get (keyword %))\n                 (get :items))\n            post-types)))))\n\n;; get post for passed in post-id\n(reg-sub\n ::post-by-id\n (fn [_ [_ post-id]]\n   (let [all-posts @(subscribe [::all-posts])] \n     (first\n       (filter\n         #(= post-id (:id %))\n         all-posts)))))\n\n;; gets post list for passed in post-type\n(reg-sub\n ::posts-by-type\n (fn [db [_ post-type]]\n   (get db (keyword post-type))))\n\n;; metadata about post list for passed in post-type\n(reg-sub\n ::last-loaded-page\n (fn [db [_ post-type]]\n   (:last-loaded-page ((keyword post-type) db))))\n\n(reg-sub\n ::per\n (fn [db [_ post-type]]\n   (:per ((keyword post-type) db))))\n\n;; which icon header should use\n(reg-sub\n ::icon-key\n (fn []\n   (let [post-id     @(subscribe [::post-id])\n         post-type   @(subscribe [::post-type])\n         recent-post (or ; either post detail page, or first :latest post\n                      @(subscribe [::post-by-id post-id])\n                      (first (:items @(subscribe [::posts-by-type post-type]))))]\n     (keyword\n      (if (or (some? post-id) (= post-type \"latest\"))\n        (first (:labels recent-post))\n        post-type)))))\n"]}