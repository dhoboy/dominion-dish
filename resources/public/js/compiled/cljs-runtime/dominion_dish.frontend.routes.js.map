{"version":3,"sources":["dominion_dish/frontend/routes.cljs"],"mappings":"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","names":["js/dominion-dish","js/dominion-dish.frontend","js/dominion-dish.frontend.routes","js/dominion-dish.frontend.routes.panels","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","cljs.core.get","fexpr__31317","cljs.core/MultiFn","cljs.core.symbol","dominion-dish.frontend.routes/panels","cljs.core/identity","cljs.core/deref","post-id","re_frame.core.subscribe","post","dominion-dish.frontend.components.post/post-detail","post-type","posts","dominion-dish.frontend.components.post/post-list","dominion-dish.frontend.routes/routes","p__31318","map__31319","cljs.core/--destructure-map","dominion-dish.frontend.routes/dispatch","route-params","handler","or__4212__auto__","found-post","re-frame.core/dispatch","dominion-dish.frontend.routes/parse","url","bidi.bidi/match-route","clojure.string/replace","js/dominion-dish.frontend.routes.history","dominion-dish.frontend.routes/history","pushy.core/pushy","dominion-dish.frontend.routes/start!","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","dominion-dish.frontend.routes/url-for","seq31320","self__4806__auto__","cljs.core/seq","args","cljs.core.apply","bidi.bidi/path-for","cljs.core.into","re-frame.core/reg-fx","p__31321","map__31322","dominion_dish.frontend.routes.url_for"],"sourcesContent":["(ns dominion-dish.frontend.routes\n  (:require\n   [clojure.string :as str]\n   [bidi.bidi :as bidi]\n   [pushy.core :as pushy]\n   [re-frame.core :as re-frame]\n   [dominion-dish.frontend.components.post :as post]\n   [dominion-dish.frontend.events :as events]\n   [dominion-dish.frontend.subs :as subs]))\n\n;; re-frame calls pages \"panels\"\n(defmulti panels identity)\n\n(defmethod panels :post-detail []\n  (let [post-id @(re-frame/subscribe [::subs/post-id])\n        post @(re-frame/subscribe [::subs/post-by-id post-id])]\n    (post/post-detail post)))\n\n(defmethod panels :post-list []\n  (let [post-type @(re-frame/subscribe [::subs/post-type])\n        posts @(re-frame/subscribe [::subs/posts-by-type post-type])]\n     (post/post-list\n      {:post-type post-type\n       :posts posts})))\n\n(defmethod panels :default []\n  (let [posts @(re-frame/subscribe [::subs/posts-by-type \"latest\"])]\n    (post/post-list\n     {:post-type :latest\n      :posts posts})))\n\n(def routes\n  (atom\n   [\"/\" {\"\" :latest\n         [:post-type] {\"\"             :post-list\n                       [\"/\" :post-id] :post-detail}}]))\n\n\n(defn dispatch\n  [{:keys [route-params handler]}]\n  (let [post-type (or (:post-type route-params) ; just always use the store version?\n                      @(re-frame/subscribe [::subs/post-type]))\n        post-id (:post-id route-params)]\n    (if post-id ; single post\n      (let [found-post @(re-frame/subscribe [::subs/post-by-id post-id])]\n        (when (nil? found-post) ; call for post if not in state\n          (re-frame/dispatch [::events/get-post {:post-type post-type :post-id post-id}]))\n        (re-frame/dispatch ; set the page route in state\n         [::events/set-route \n          {:handler handler\n           :post-type post-type\n           :post-id post-id}])) \n      (let [posts @(re-frame/subscribe [::subs/posts-by-type post-type])] ; post-list\n        (when (nil? (:last-loaded-page posts))\n          (re-frame/dispatch [::events/get-posts {:post-type post-type}]))\n        (re-frame/dispatch \n         [::events/set-route\n          {:handler handler \n           :post-type post-type \n           :post-id nil}])))))\n\n;; I need hash routing for the frontend so the backend server will ignore\n(defn parse\n  [url]\n  (bidi/match-route \n    @routes \n    (str/replace url #\"^/?#\" \"\")))\n\n(defonce history\n  (pushy/pushy \n    dispatch \n    parse))\n\n;; called by core.cljs, just starts history\n(defn start! [] (pushy/start! history))\n\n;; (url-for :post-list :post-type :football) => \"/football\"\n;; (url-for :post-detail :post-type :football :post-id 234343) => \"/football/234343\"\n(defn url-for\n  [& args]\n  (str \"#\" (apply bidi/path-for (into [@routes] args))))\n\n(re-frame/reg-fx\n :navigate\n (fn [{:keys [handler post-type post-id]}]\n   (pushy/set-token! \n     history \n     (url-for \n       handler\n       :post-type post-type\n       :post-id post-id))))\n"]}