{"version":3,"sources":["dominion_dish/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","day8.re-frame.debux.common.util/send-form!","result__33664__auto__","day8.re-frame.debux.common.util/send-trace!","e","e36023","_","dominion-dish.db/default-db","re_frame.core.reg_event_fx","p__36025","vec__36026","cljs.core.nth","map__36029","cljs.core/--destructure-map","cljs.core.get","e36035","p__36049","vec__36050","map__36053","handler","post-type","post-id","p__36055","p__36056","map__36057","vec__36058","map__36061","e36062","p__36063","p__36064","map__36065","vec__36066","map__36069","db","cljs.core.assoc","dominion-dish.events/post-list-observer","js/IntersectionObserver","entries","G__36073","vec__36074","seq__36075","cljs.core/seq","first__36076","cljs.core/first","cljs.core/next","vec__36077","seq__36078","first__36079","item","rest","re-frame.core/dispatch","js/document","p__36080","vec__36081","map__36084","element","p__36085","vec__36086","map__36089","p__36090","map__36091","map__36092","post-type-key","cljs.core.keyword","last-loaded-page","per","items","cljs.core._EQ_","cljs.core/count","p__36093","p__36094","map__36095","vec__36096","map__36099","page","ajax.core/json-response-format","p__36100","vec__36101","map__36104","map__36105","pagination","dominion-dish.utils/add-items-to-list","p__36106","vec__36107","resp","p__36110","p__36111","map__36112","vec__36113","map__36116","p__36117","vec__36118","map__36121","map__36122","p__36123","vec__36124"],"sourcesContent":["(ns dominion-dish.events\n  (:require\n   [re-frame.core :as re-frame]\n   [ajax.core :as ajax]\n   [day8.re-frame.http-fx]\n   [day8.re-frame.tracing :refer-macros [fn-traced]]\n   [dominion-dish.db :refer [default-db post-types]]\n   [dominion-dish.utils :as utils]))\n \n;; initialize db\n(re-frame/reg-event-db\n ::initialize-db\n (fn-traced [_ _]\n            default-db))\n\n;; routing effects\n(re-frame/reg-event-fx\n ::navigate\n (fn-traced [_ [_ {:keys [handler post-type post-id]}]]\n   ; this is an effects map with an effects key\n   ; this :navigate effect is called\n   ; and any other effects that may be in this map\n   ; when this event fn returns.\n   {:navigate {:handler handler\n               :post-type post-type\n               :post-id post-id}}))\n\n(re-frame/reg-event-fx\n ::set-route\n (fn-traced [{:keys [db]} [_ {:keys [handler post-type post-id]}]]\n   {:db (assoc\n         db\n         :active-panel handler\n         :post-type post-type\n         :post-id post-id)}))\n\n ;; post list infinite scroll effects\n (def post-list-observer\n   (js/IntersectionObserver.\n    (fn [entries _]\n      (loop [[item & rest] entries]\n        (when (.-isIntersecting item)\n          (re-frame/dispatch [::check-post-list]))\n        (when rest (recur rest))))\n    {:root (.getElementById js/document \"app\")\n     :threshold 1.0}))\n \n(re-frame/reg-event-fx\n  ::observe-post-list\n  (fn [_ [_ {:keys [element]}]]\n    (.observe post-list-observer element)))\n  \n(re-frame/reg-event-fx\n  ::unobserve-post-list\n  (fn [_ [_ {:keys [element]}]]\n    (.unobserve post-list-observer element)))\n\n(re-frame/reg-event-fx\n ::check-post-list\n (fn [{:keys [db]}]\n   (let [post-type (:post-type db)\n         post-type-key (keyword post-type)\n         {:keys [last-loaded-page per items]} (post-type-key db)]\n     (when (= (* last-loaded-page per) (count items))\n       (re-frame/dispatch [::get-posts {:post-type post-type :page (+ last-loaded-page 1) :per per}])))))\n\n;; get-posts\n;; usage: (dispatch [::get-posts {:post-type \"boys-basketball\" :page 1 :per 10}])\n(re-frame/reg-event-fx                             \n ::get-posts\n (fn [{:keys [db]} [_ {:keys [post-type page per] :or {page 1 per 10}}]]\n   {:db (assoc db :loading true)\n    :http-xhrio {:method          :get\n                 :uri             (str \n                                   \"http://localhost:3000/posts/\" \n                                   post-type \n                                   \"?page=\" page \"&per=\" per)\n                 :timeout         8000\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [::get-posts-success {:post-type post-type}]\n                 :on-failure      [::get-posts-failure]}}))\n\n(re-frame/reg-event-db\n ::get-posts-success\n (fn [db [_ {:keys [post-type]} {:keys [pagination items]}]]\n   (let [post-type-key (keyword post-type)]\n     (assoc\n       db\n       :loading false\n       post-type-key {:last-loaded-page (:page pagination)\n                      :per (:per pagination)\n                      :items (utils/add-items-to-list\n                              {:current-items (:items (post-type-key db))\n                               :new-items items})}))))\n\n(re-frame/reg-event-db\n ::get-posts-failure\n (fn [db [_ resp]]\n   (assoc \n    db\n    :error true)))\n  \n;; get-post\n;; usage: (dispatch [::events/get-post {:post-type \"boys-basketball\" :post-id \"1234\"}]\n(re-frame/reg-event-fx\n ::get-post\n (fn [{:keys [db]} [_ {:keys [post-type post-id]}]]\n   {:db (assoc db :loading true)\n    :http-xhrio {:method          :get\n                 :uri             (str \"http://localhost:3000/post/\" post-id)\n                 :timeout         8000\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [::get-post-success {:post-type post-type}]\n                 :on-failure      [::get-post-failure]}}))\n  \n(re-frame/reg-event-db\n ::get-post-success\n (fn [db [_ {:keys [post-type]} {:keys [items]}]]\n   (let [post-type-key (keyword post-type)]\n     (assoc\n      db\n      :loading false\n      post-type-key {:items (utils/add-items-to-list\n                             {:current-items (:items (post-type-key db))\n                              :new-items items})}))))\n\n(re-frame/reg-event-db\n ::get-post-failure\n (fn [db [_ resp]]\n   (assoc \n    db\n    :error true)))"]}