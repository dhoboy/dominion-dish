{"version":3,"sources":["dominion_dish/frontend/events.cljs"],"mappings":";AAUA,yDAAA,zDAACA,wLAEA,EAAA,AAAAC,iDAAA,WAAYO,EAAEA;AAAd,AAAA,IAAAN,6BAAA;AAAA,AAAA,IAAA,AAAA,AAAAC,gDAAA,AAAA;;AAAA,IAAAC,wBACWK;AADX,AAAA,AAAAJ,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,sEAAA,qEAAA;;AAAAA;gBAAA,IAAAE,IAAAC;AAAA,AAAA,MAAAD;IAAA,WAAYE,EAAEA;AAAd,AACWC;;AAGZ,yDAAA,zDAACC,+KAEA,EAAA,AAAAT,iDAAA,aAAAU,FAAYH;AAAZ,AAAA,IAAAI,aAAAD;YAAA,AAAAE,4CAAAD,WAAA,IAAA,nEAAeJ;IAAfM,aAAA,AAAAD,4CAAAD,WAAA,IAAA;IAAAE,iBAAA,AAAAC,4BAAAD;cAAA,AAAAE,4CAAAF,eAAA,rEAAyBO;gBAAzB,AAAAL,4CAAAF,eAAA,vEAAiCQ;cAAjC,AAAAN,4CAAAF,eAAA,rEAA2CS;AAA3C,AAAA,IAAArB,6BAAA;AAAA,AAAA,IAAA,AAAA,AAAAC,gDAAA,AAAA;;AAAA,IAAAC,wBAAA,2CAAA,4DAAA,iBAAAA,wBAAA,2CAAA,2DAAA,iBAAAA,wBAKuBiB;AALvB,AAAA,AAAAhB,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,+DAAA,qEAAA;;AAAAA;KAAA,+DAAA,iBAAAA,wBAMyBkB;AANzB,AAAA,AAAAjB,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,mEAAA,qEAAA;;AAAAA;KAAA,2DAAA,iBAAAA,wBAOuBmB;AAPvB,AAAA,AAAAlB,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,gEAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,0aAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,yhBAAA,qEAAA;;AAAAA;gBAAA,IAAAE,IAAAW;AAAA,AAAA,MAAAX;IAAA,aAAAY,FAAYV;AAAZ,AAAA,IAAAW,aAAAD;YAAA,AAAAL,4CAAAM,WAAA,IAAA,nEAAeX;IAAfY,aAAA,AAAAP,4CAAAM,WAAA,IAAA;IAAAC,iBAAA,AAAAL,4BAAAK;cAAA,AAAAJ,4CAAAI,eAAA,rEAAyBC;gBAAzB,AAAAL,4CAAAI,eAAA,vEAAiCE;cAAjC,AAAAN,4CAAAI,eAAA,rEAA2CG;AAA3C,AAAA,kDAAA,4DAAA,2CAAA,mEAAA,yEAAA,jFAKuBF,uEACEC,qEACFC;;AAExB,yDAAA,zDAACb,kLAEA,EAAA,AAAAT,iDAAA,WAAAuB,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAX,4BAAAW;SAAA,AAAAV,4CAAAU,eAAA,hEAAoBS;IAApBR,aAAAF;QAAA,AAAAZ,4CAAAc,WAAA,IAAA,/DAA0BnB;IAA1BoB,aAAA,AAAAf,4CAAAc,WAAA,IAAA;IAAAC,iBAAA,AAAAb,4BAAAa;cAAA,AAAAZ,4CAAAY,eAAA,rEAAoCP;gBAApC,AAAAL,4CAAAY,eAAA,vEAA4CN;cAA5C,AAAAN,4CAAAY,eAAA,rEAAsDL;AAAtD,AAAA,IAAArB,6BAAA;AAAA,AAAA,IAAA,AAAA,AAAAC,gDAAA,AAAA;;AAAA,IAAAC,wBAAA,2CAAA,gDAAA,iBAAAA,wBAAA,qDAAA,iBAAAA,tEACQgC,8FACAD;AAFR,AAAA,AAAA9B,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,sDAAA,qEAAA;;AAAAA;KAAA,sEAAA,iBAAAA,wBAGsBiB;AAHtB,AAAA,AAAAhB,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,+DAAA,qEAAA;;AAAAA;uDAAA,+DAAA,iBAAAA,wBAImBkB;AAJnB,AAAA,AAAAjB,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,mEAAA,qEAAA;;AAAAA;KAAA,2DAAA,iBAAAA,wBAKiBmB;AALjB,AAAA,AAAAlB,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,KAAA,yDAAAD,sBAAA,sDAAA,AAAA,gEAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,mgBAAA,qEAAA;;AAAAA;;AAAA,AAAA,AAAAC,iDAAA,2CAAA,8DAAA,EAAA,qEAAA,IAAA,yDAAAD,sBAAA,sDAAA,AAAA,smBAAA,qEAAA;;AAAAA;gBAAA,IAAAE,IAAAuB;AAAA,AAAA,MAAAvB;IAAA,WAAAwB,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAjB,4BAAAiB;SAAA,AAAAhB,4CAAAgB,eAAA,hEAAoBG;IAApBF,aAAAF;QAAA,AAAAlB,4CAAAoB,WAAA,IAAA,/DAA0BzB;IAA1B0B,aAAA,AAAArB,4CAAAoB,WAAA,IAAA;IAAAC,iBAAA,AAAAnB,4BAAAmB;cAAA,AAAAlB,4CAAAkB,eAAA,rEAAoCb;gBAApC,AAAAL,4CAAAkB,eAAA,vEAA4CZ;cAA5C,AAAAN,4CAAAkB,eAAA,rEAAsDX;AAAtD,AAAA,kDAAA,gDACO,wDAAA,gIAAA,yEAAA,jQAACa,qDACAD,yEACcd,yHACHC,qEACFC;;AAGjB,AAAKc,mDACH,KAAAC,qBACC,WAAKC,QAAQ/B;AAAb,AACE,IAAAgC,WAAqBD;IAArBE,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;WAAAE,PAAQM;WAARR,PAAeS;AAAf,AAAA,IAAAX,eAAAA;;AAAA,AAAA,IAAAO,aAAAP;IAAAQ,aAAA,AAAAL,cAAAI;IAAAE,eAAA,AAAAJ,gBAAAG;IAAAA,iBAAA,AAAAF,eAAAE;eAAAC,XAAQC;eAARF,XAAeG;AAAf,AACE,oBAAM,AAAkBD;AAAxB,AACE,uBAAA,mFAAA,1GAACE;;AADH;;AAEA,GAAMD;AAAN,AAAW,eAAOA;;;;AAAlB;;;;GALL,2CAAA,oFAAA,8DAAA,7FAMQ,wBAAA,xBAAiBE;AAG5B,yDAAA,zDAAC3C,kMAEC,aAAA4C,FAAK9C;AAAL,AAAA,IAAA+C,aAAAD;YAAA,AAAAzC,4CAAA0C,WAAA,IAAA,nEAAQ/C;IAARgD,aAAA,AAAA3C,4CAAA0C,WAAA,IAAA;IAAAC,iBAAA,AAAAzC,4BAAAyC;cAAA,AAAAxC,4CAAAwC,eAAA,rEAAkBC;AAAlB,AACE,OAAUpB,yDAAmBoB;;AAEjC,yDAAA,zDAAC/C,oMAEC,aAAAgD,FAAKlD;AAAL,AAAA,IAAAmD,aAAAD;YAAA,AAAA7C,4CAAA8C,WAAA,IAAA,nEAAQnD;IAARoD,aAAA,AAAA/C,4CAAA8C,WAAA,IAAA;IAAAC,iBAAA,AAAA7C,4BAAA6C;cAAA,AAAA5C,4CAAA4C,eAAA,rEAAkBH;AAAlB,AACE,OAAYpB,2DAAmBoB;;AAEnC,yDAAA,zDAAC/C,6LAEA,WAAAmD;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAA/C,4BAAA+C;SAAA,AAAA9C,4CAAA8C,eAAA,hEAAa3B;AAAb,AACE,IAAM6B,UAAQ,AAAA,yFAAU7B;IAClBb,YAAU,AAAA,6FAAYa;IACtB8B,gBAAc,AAACC,gDAAQ5C;IAF7ByC,aAG2C,CAACE,8CAAAA,kDAAAA,NAAc9B,8BAAAA;IAH1D4B,iBAAA,AAAAhD,4BAAAgD;uBAAA,AAAA/C,4CAAA+C,eAAA,9EAGcI;UAHd,AAAAnD,4CAAA+C,eAAA,jEAG+BK;YAH/B,AAAApD,4CAAA+C,eAAA,nEAGmCM;AAHnC,AAIE,GAAM,EAAK,AAACC,6CAAE,CAAGH,mBAAiBC,KAAK,AAACG,gBAAMF,aAAQ,AAACG,cAAIR;AAA3D,AACE,8BAAA,mFAAA,wHAAA,2CAAA,yEAAA,6EAAA,naAACZ,4UAA2C9B,8DAAgB,oBAAA,nBAAG6C,4EAAyBC;;AAD1F;;;AAQL,yDAAA,zDAAC1D,iLAEA,WAAA+D,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAA5D,4BAAA4D;SAAA,AAAA3D,4CAAA2D,eAAA,hEAAaxC;IAAbyC,aAAAF;QAAA,AAAA7D,4CAAA+D,WAAA,IAAA,/DAAmBpE;IAAnBqE,aAAA,AAAAhE,4CAAA+D,WAAA,IAAA;IAAAC,iBAAA,AAAA9D,4BAAA8D;gBAAA,AAAA7D,4CAAA6D,eAAA,vEAA6BvD;WAA7B,AAAAN,4CAAA6D,eAAA,oDAAA,tHAAuCC;UAAvC,AAAA9D,4CAAA6D,eAAA,oDAAA,rHAA4CT;AAA5C,AAAA,kDAAA,kKAAA,iEAAA,2CAAA,uDAAA,mDAAA,wQAAA,2DAAA,OAAA,iOAAA,iEAAA,mFAAA,wIAAA,2CAAA,yFAAA,gEAAA,mFAAA,t6CACO,iDAAA,2DAAA,5GAAChC,8CAAMD,6UAEmB,CAAA,sFAAA,2DAAA,tEAECb,gEACSwD,0DAAaV,4JAEvB,+BAAA,2CAAA,8DAAA,xIAACW,4hBACgCzD;;AAGnE,yDAAA,zDAACtB,iMAEA,cAAAgF,HAAK7C;AAAL,AAAA,IAAA8C,aAAAD;QAAA,AAAAnE,4CAAAoE,WAAA,IAAA,/DAASzE;IAAT0E,aAAA,AAAArE,4CAAAoE,WAAA,IAAA;IAAAC,iBAAA,AAAAnE,4BAAAmE;gBAAA,AAAAlE,4CAAAkE,eAAA,vEAAmB5D;IAAnB6D,aAAA,AAAAtE,4CAAAoE,WAAA,IAAA;IAAAE,iBAAA,AAAApE,4BAAAoE;iBAAA,AAAAnE,4CAAAmE,eAAA,xEAAuCC;YAAvC,AAAApE,4CAAAmE,eAAA,nEAAkDd;AAAlD,AACE,IAAMJ,gBAAc,AAACC,gDAAQ5C;AAA7B,AACE,+DAAA,2DAAA,wDAAA,uDAAA,oBAAA,2CAAA,4KAAA,kJAAA,/lBAACc,qDACAD,mLAGA8B,uIAAiC,AAAA,kFAAOmB,gEACpB,AAAA,kFAAMA,mEACJ,+CAAA,2CAAA,0RAAA,pXAACC,gKACgB,AAAA,qFAAQ,CAACpB,8CAAAA,kDAAAA,NAAc9B,8BAAAA,sEAC3BkC;;AAEzC,yDAAA,zDAACrE,iMAEA,cAAAsF,HAAKnD;AAAL,AAAA,IAAAoD,aAAAD;QAAA,AAAAzE,4CAAA0E,WAAA,IAAA,/DAAS/E;YAAT,AAAAK,4CAAA0E,WAAA,IAAA,nEAAWC;AAAX,AACE,+DAAA,2DAAA,wDAAA,uDAAA,lOAACpD,qDACAD;;AAMJ,yDAAA,zDAACzB,8KAEA,WAAA+E,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAA5E,4BAAA4E;SAAA,AAAA3E,4CAAA2E,eAAA,hEAAaxD;IAAbyD,aAAAF;QAAA,AAAA7E,4CAAA+E,WAAA,IAAA,/DAAmBpF;IAAnBqF,aAAA,AAAAhF,4CAAA+E,WAAA,IAAA;IAAAC,iBAAA,AAAA9E,4BAAA8E;gBAAA,AAAA7E,4CAAA6E,eAAA,vEAA6BvE;cAA7B,AAAAN,4CAAA6E,eAAA,rEAAuCtE;AAAvC,AAAA,kDAAA,kKAAA,iEAAA,2CAAA,uDAAA,mDAAA,iJAAA,2DAAA,OAAA,iOAAA,iEAAA,mFAAA,uIAAA,2CAAA,yFAAA,gEAAA,mFAAA,9yCACO,iDAAA,2DAAA,5GAACa,8CAAMD,6UAEmB,CAAA,0EAAmCZ,gKAEnC,+BAAA,2CAAA,8DAAA,xIAACwD,2hBAC+BzD;;AAGlE,yDAAA,zDAACtB,gMAEA,cAAA8F,HAAK3D;AAAL,AAAA,IAAA4D,aAAAD;QAAA,AAAAjF,4CAAAkF,WAAA,IAAA,/DAASvF;IAATwF,aAAA,AAAAnF,4CAAAkF,WAAA,IAAA;IAAAC,iBAAA,AAAAjF,4BAAAiF;gBAAA,AAAAhF,4CAAAgF,eAAA,vEAAmB1E;IAAnB2E,aAAA,AAAApF,4CAAAkF,WAAA,IAAA;IAAAE,iBAAA,AAAAlF,4BAAAkF;YAAA,AAAAjF,4CAAAiF,eAAA,nEAAuC5B;AAAvC,AACE,IAAMJ,gBAAc,AAACC,gDAAQ5C;AAA7B,AACE,+DAAA,2DAAA,wDAAA,uDAAA,oBAAA,2CAAA,jSAACc,qDACAD,mLAGA8B,gHAAsB,+CAAA,2CAAA,0RAAA,pXAACoB,gKACgB,AAAA,qFAAQ,CAACpB,8CAAAA,kDAAAA,NAAc9B,8BAAAA,sEAC3BkC;;AAEzC,yDAAA,zDAACrE,8LAEA,cAAAkG,HAAK/D;AAAL,AAAA,IAAAgE,aAAAD;QAAA,AAAArF,4CAAAsF,WAAA,IAAA,/DAAS3F;YAAT,AAAAK,4CAAAsF,WAAA,IAAA,nEAAWX;AAAX,AACE,+DAAA,2DAAA,wDAAA,uDAAA,lOAACpD,qDACAD","names":["re_frame.core.reg_event_db","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","day8.re-frame.debux.common.util/send-form!","result__30235__auto__","day8.re-frame.debux.common.util/send-trace!","e","e31225","_","dominion-dish.frontend.db/default-db","re_frame.core.reg_event_fx","p__31226","vec__31227","cljs.core.nth","map__31230","cljs.core/--destructure-map","cljs.core.get","e31231","p__31232","vec__31233","map__31236","handler","post-type","post-id","p__31237","p__31238","map__31239","vec__31240","map__31243","e31244","p__31245","p__31246","map__31247","vec__31248","map__31251","db","cljs.core.assoc","dominion-dish.frontend.events/post-list-observer","js/IntersectionObserver","entries","G__31255","vec__31256","seq__31257","cljs.core/seq","first__31258","cljs.core/first","cljs.core/next","vec__31259","seq__31260","first__31261","item","rest","re-frame.core/dispatch","js/document","p__31262","vec__31263","map__31266","element","p__31267","vec__31268","map__31271","p__31272","map__31273","map__31274","loading","post-type-key","cljs.core.keyword","last-loaded-page","per","items","cljs.core._EQ_","cljs.core/count","cljs.core/not","p__31275","p__31276","map__31277","vec__31278","map__31281","page","ajax.core/json-response-format","p__31282","vec__31283","map__31286","map__31287","pagination","dominion-dish.frontend.utils/add-items-to-list","p__31288","vec__31289","_resp","p__31292","p__31293","map__31294","vec__31295","map__31298","p__31299","vec__31300","map__31303","map__31304","p__31305","vec__31306"],"sourcesContent":["(ns dominion-dish.frontend.events\n  (:require\n   [re-frame.core :as re-frame]\n   [ajax.core :as ajax]\n   [day8.re-frame.http-fx]\n   [day8.re-frame.tracing :refer-macros [fn-traced]]\n   [dominion-dish.frontend.db :refer [default-db]]\n   [dominion-dish.frontend.utils :as utils]))\n \n;; initialize db\n(re-frame/reg-event-db\n ::initialize-db\n (fn-traced [_ _]\n            default-db))\n\n;; routing effects\n(re-frame/reg-event-fx\n ::navigate\n (fn-traced [_ [_ {:keys [handler post-type post-id]}]]\n   ; this is an effects map with an effects key\n   ; this :navigate effect is called\n   ; and any other effects that may be in this map\n   ; when this event fn returns.\n   {:navigate {:handler handler\n               :post-type post-type\n               :post-id post-id}}))\n\n(re-frame/reg-event-fx\n ::set-route\n (fn-traced [{:keys [db]} [_ {:keys [handler post-type post-id]}]]\n   {:db (assoc\n         db\n         :active-panel handler\n         :post-type post-type\n         :post-id post-id)}))\n\n ;; post list infinite scroll effects\n (def post-list-observer\n   (js/IntersectionObserver.\n    (fn [entries _]\n      (loop [[item & rest] entries]\n        (when (.-isIntersecting item)\n          (re-frame/dispatch [::check-post-list]))\n        (when rest (recur rest))))\n    {:root (.getElementById js/document \"app\")\n     :threshold 1.0}))\n \n(re-frame/reg-event-fx\n  ::observe-post-list\n  (fn [_ [_ {:keys [element]}]]\n    (.observe post-list-observer element)))\n  \n(re-frame/reg-event-fx\n  ::unobserve-post-list\n  (fn [_ [_ {:keys [element]}]]\n    (.unobserve post-list-observer element)))\n\n(re-frame/reg-event-fx\n ::check-post-list\n (fn [{:keys [db]}]\n   (let [loading (:loading db)\n         post-type (:post-type db)\n         post-type-key (keyword post-type)\n         {:keys [last-loaded-page per items]} (post-type-key db)]\n     (when (and (= (* last-loaded-page per) (count items)) (not loading))\n       (re-frame/dispatch [::get-posts {:post-type post-type :page (+ last-loaded-page 1) :per per}])))))\n\n;; TODO: look into cancel tokens in the case where you get\n;; a request while another one is underway\n\n;; get-posts\n;; usage: (dispatch [::get-posts {:post-type \"boys-basketball\" :page 1 :per 10}])\n(re-frame/reg-event-fx                             \n ::get-posts\n (fn [{:keys [db]} [_ {:keys [post-type page per] :or {page 1 per 10}}]]\n   {:db (assoc db :loading true)\n    :http-xhrio {:method          :get\n                 :uri             (str \n                                   \"http://localhost:3000/posts/\" \n                                   post-type \n                                   \"?page=\" page \"&per=\" per)\n                 :timeout         8000\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [::get-posts-success {:post-type post-type}]\n                 :on-failure      [::get-posts-failure]}}))\n\n(re-frame/reg-event-db\n ::get-posts-success\n (fn [db [_ {:keys [post-type]} {:keys [pagination items]}]]\n   (let [post-type-key (keyword post-type)]\n     (assoc\n      db\n      :loading false\n      :error false\n      post-type-key {:last-loaded-page (:page pagination)\n                     :per (:per pagination)\n                     :items (utils/add-items-to-list\n                             {:current-items (:items (post-type-key db))\n                              :new-items items})}))))\n\n(re-frame/reg-event-db\n ::get-posts-failure\n (fn [db [_ _resp]]\n   (assoc \n    db\n    :loading false\n    :error true)))\n  \n;; get-post\n;; usage: (dispatch [::events/get-post {:post-type \"boys-basketball\" :post-id \"1234\"}]\n(re-frame/reg-event-fx\n ::get-post\n (fn [{:keys [db]} [_ {:keys [post-type post-id]}]]\n   {:db (assoc db :loading true)\n    :http-xhrio {:method          :get\n                 :uri             (str \"http://localhost:3000/post/\" post-id)\n                 :timeout         8000\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [::get-post-success {:post-type post-type}]\n                 :on-failure      [::get-post-failure]}}))\n  \n(re-frame/reg-event-db\n ::get-post-success\n (fn [db [_ {:keys [post-type]} {:keys [items]}]]\n   (let [post-type-key (keyword post-type)]\n     (assoc\n      db\n      :loading false\n      :error false\n      post-type-key {:items (utils/add-items-to-list\n                             {:current-items (:items (post-type-key db))\n                              :new-items items})}))))\n\n(re-frame/reg-event-db\n ::get-post-failure\n (fn [db [_ _resp]]\n   (assoc \n    db\n    :loading false\n    :error true)))"]}