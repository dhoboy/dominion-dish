{"version":3,"sources":["dominion_dish/components/post.cljs"],"mappings":"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","names":["p__35837","map__35838","cljs.core/--destructure-map","cljs.core.get","dominion-dish.components.post/post-preview","title","content","id","post-type","published","formatted-content","dominion-dish.utils/strip-off-html","re-frame.core/dispatch","dominion-dish.utils/format-date","cljs.core.subs","dominion-dish.components.post/post-detail-el","cljs.core.atom","p__35839","map__35840","dominion-dish.components.post/post-detail","cljs.core/deref","loading","re_frame.core.subscribe","error","el","cljs.core/reset!","dominion-dish.components.generic/loader","dominion-dish.components.generic/error","cljs.core/not","dominion-dish.components.post/post-list-get-more-el","p__35842","map__35843","dominion-dish.components.post/post-list","posts","last-loaded-page","per","p1__35841#","cljs.core.map","cljs.core.assoc","cljs.core._EQ_","cljs.core/count","dominion_dish.components.generic.error","cljs.core.not_EQ_"],"sourcesContent":["(ns dominion-dish.components.post\n  (:require [re-frame.core :refer [subscribe dispatch]]\n            [dominion-dish.subs :as subs]\n            [dominion-dish.utils :as utils]\n            [dominion-dish.events :as events]\n            [dominion-dish.components.generic :as generic]))\n\n;; Post Preview Component\n(defn post-preview\n  \"Post preview card for the main page\"\n  [{:keys [title content id post-type published]}]\n  (let [formatted-content (utils/strip-off-html content)]\n    [:div.post-preview\n     {:key id\n      :on-click #(dispatch [::events/navigate\n                            {:handler :post-detail\n                             :post-type post-type\n                             :post-id id}])}\n     [:div.title\n      [:h3 title]\n      [:p (utils/format-date published)]] ; nah, look into text-overflow: ellipsis for this\n     [:p.preview-body (if (> (count formatted-content) 200)\n                        (str (subs formatted-content 0 200) \"...\")\n                        formatted-content)]]))\n\n;; Post Detail Component\n(def post-detail-el (atom nil))\n\n(defn post-detail\n  \"Post detail card for full view\"\n  [{:keys [title content published]}]\n  (let [loading @(subscribe [::subs/loading])\n        error @(subscribe [::subs/error])]\n    [:div.post-detail {:ref (fn [el] (reset! post-detail-el el))}\n     (when loading (generic/loader {:size \"large\"}))\n     (when error (generic/error))\n     (when (and (not loading) (not error))\n       [:<>\n         [:div.title\n           [:h3 title]\n           [:p (utils/format-date published)]]\n         [:p.detail-body (utils/strip-off-html content)]])]))\n\n;; Post List Component\n(def post-list-get-more-el (atom nil))\n\n(defn post-list\n  \"Returns a post list of posts of passed in type\"\n  [{:keys [post-type posts]}]\n  (let [loading @(subscribe [::subs/loading])\n        error @(subscribe [::subs/error])\n        last-loaded-page @(subscribe [::subs/last-loaded-page post-type])\n        per @(subscribe [::subs/per post-type])]\n    [:div.post-list\n     (map\n      #(post-preview (assoc % :post-type post-type))\n      (:items posts))\n     (when loading\n       (generic/loader {:size (if (= (count (:items posts)) 0) \"large\" \"small\")}))\n     (when error\n       (generic/error \"The Dish can't get more posts right now. Give us a moment and try again.\"))\n     (when (= (* last-loaded-page per) (count (:items posts)))\n       [:div {:id \"post-list-get-more\"\n              :ref (fn [el] (reset! post-list-get-more-el el))}])\n     (when (not= (* last-loaded-page per) (count (:items posts)))\n       [:div {:id \"post-list-end\"}\n        [:i {:class \"fas fa-ellipsis-h\"}]])]))\n\n;; this is working with component loader HOC, but i'm not 100% sure why\n;; (defn post-list\n;;   \"Returns a post list of posts of passed in type\"\n;;   [{:keys [post-type posts]}]\n;;   (let [loading @(subscribe [::subs/loading])\n;;         error false]\n;;     (generic/component-loader\n;;      {:loading loading\n;;       :error error\n;;       :wrapper-class \"post-list\"\n;;       :contents [:<>\n;;                  (map\n;;                   #(post-preview (assoc % :post-type post-type))\n;;                   (:items posts))\n;;                  [:div {:id \"post-list-get-more\" \n;;                         :ref (fn [el]\n;;                                (println \"yo new one is made: \" el)\n;;                                (reset! post-list-get-more-el el))}]]})))\n"]}