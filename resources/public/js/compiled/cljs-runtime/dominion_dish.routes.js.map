{"version":3,"sources":["dominion_dish/routes.cljs"],"mappings":"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","names":["js/dominion-dish","js/dominion-dish.routes","js/dominion-dish.routes.panels","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","cljs.core.get","fexpr__35862","cljs.core/MultiFn","cljs.core.symbol","dominion-dish.routes/panels","cljs.core/identity","cljs.core/deref","post-id","re_frame.core.subscribe","post","dominion-dish.components.post/post-detail","post-type","posts","dominion-dish.components.post/post-list","dominion-dish.routes/routes","p__35863","map__35864","cljs.core/--destructure-map","dominion-dish.routes/dispatch","route-params","handler","or__4212__auto__","found-post","re-frame.core/dispatch","dominion-dish.routes/parse","url","bidi.bidi/match-route","js/dominion-dish.routes.history","dominion-dish.routes/history","pushy.core/pushy","dominion-dish.routes/start!","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","dominion-dish.routes/url-for","seq35865","self__4806__auto__","cljs.core/seq","args","cljs.core.apply","bidi.bidi/path-for","cljs.core.into","re-frame.core/reg-fx","p__35866","map__35867","dominion_dish.routes.url_for"],"sourcesContent":["(ns dominion-dish.routes\n  (:require\n   [bidi.bidi :as bidi]\n   [pushy.core :as pushy]\n   [re-frame.core :as re-frame]\n   [dominion-dish.components.post :as post]\n   [dominion-dish.events :as events]\n   [dominion-dish.subs :as subs]\n   [dominion-dish.utils :as utils]))\n\n;; re-frame calls pages \"panels\"\n(defmulti panels identity)\n\n(defmethod panels :post-detail []\n  (let [post-id @(re-frame/subscribe [::subs/post-id])\n        post @(re-frame/subscribe [::subs/post-by-id post-id])]\n    (post/post-detail post)))\n\n(defmethod panels :post-list []\n  (let [post-type @(re-frame/subscribe [::subs/post-type])\n        posts @(re-frame/subscribe [::subs/posts-by-type post-type])]\n     (post/post-list\n      {:post-type post-type\n       :posts posts})))\n\n(defmethod panels :default []\n  (let [posts @(re-frame/subscribe [::subs/posts-by-type \"latest\"])]\n    (post/post-list\n     {:post-type :latest\n      :posts posts})))\n\n(def routes\n  (atom\n   [\"/\" {\"\" :latest\n         [:post-type] {\"\"             :post-list\n                       [\"/\" :post-id] :post-detail}}]))\n\n\n(defn dispatch\n  [{:keys [route-params handler]}]\n  (let [post-type (or (:post-type route-params) ; just always use the store version?\n                      @(re-frame/subscribe [::subs/post-type]))\n        post-id (:post-id route-params)]\n    (if post-id ; single post\n      (let [found-post @(re-frame/subscribe [::subs/post-by-id post-id])]\n        (when (nil? found-post) ; call for post if not in state\n          (re-frame/dispatch [::events/get-post {:post-type post-type :post-id post-id}]))\n        (re-frame/dispatch ; set the page route in state\n         [::events/set-route \n          {:handler handler\n           :post-type post-type\n           :post-id post-id}])) \n      (let [posts @(re-frame/subscribe [::subs/posts-by-type post-type])] ; post-list\n        (when (nil? (:last-loaded-page posts))\n          (re-frame/dispatch [::events/get-posts {:post-type post-type}]))\n        (re-frame/dispatch \n         [::events/set-route\n          {:handler handler \n           :post-type post-type \n           :post-id nil}])))))\n\n(defn parse\n  [url]\n  (bidi/match-route @routes url))\n\n(defonce history\n  (pushy/pushy \n    dispatch \n    parse))\n\n;; called by core.cljs, just starts history\n(defn start! [] (pushy/start! history))\n\n;; (url-for :post-list :post-type :football) => \"/football\"\n;; (url-for :post-detail :post-type :football :post-id 234343) => \"/football/234343\"\n(defn url-for\n  [& args]\n  (apply bidi/path-for (into [@routes] args)))\n\n(re-frame/reg-fx\n :navigate\n (fn [{:keys [handler post-type post-id]}]\n   (pushy/set-token! \n     history \n     (url-for \n       handler\n       :post-type post-type\n       :post-id post-id))))\n"]}